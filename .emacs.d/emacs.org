#+TITLE: Vincent Demeester's emacs configuration
#+TAGS: emacs configuration

#+BEGIN_SRC
                                                              ___ __
    .-----.--------.---.-.----.-----.______.----.-----.-----.'  _|__|.-----.
    |  -__|        |  _  |  __|__ --|______|  __|  _  |     |   _|  ||  _  |
    |_____|__|__|__|___._|____|_____|      |____|_____|__|__|__| |__||___  |
                                                                     |_____|
#+END_SRC

This is my second attempt to write a litterate configuration for
emacs. The first one want well but still, there is some part that
weren't litterate, and it got cluttered really quick.

That time, I am going to try to follow few principles:

- Do no hesitate to separate the configuration into several files. For
  example, a file for the Go language configuration, one for Org-mode
  configuration, etc. would make sense I feel. One other aspect of
  this is, I may want to be able to extract those file to publish them
  as blogpost /or/ articles.
- Do *everything* litterate. What this mean is, if I want to create a
  =Caskfile= or a shell script, this will also be in an org-mode file
  with the right =tangle= definitions.
- Adopt vim =modal= editing, thus probably using =evil= mode. And make
  sure the behaviour I adopt on my bepo layout, would be the same on a
  =qwerty= layout. What this means is, get the most common modal
  shortcut that would work on another vim setup and make sure to
  rebinding it to bepo keys.

Starting from scratch is going to be a little bit tricky, given the
load of configuration I had, but I really feel it is a good thing ðŸ‘¼.

This configuration is /tangled/ by org-mode (babel) and byte-compiled.

* Early work ðŸš€

There is a few things we want to do early :

- Setup package management
- Disable/Enable some built-in features
- Setup a correct theme (the default one is /ok/ but you know..

This makes it so that the file that is produced from tangling this
file uses lexical scoping.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;; -*- lexical-binding: t -*-
  (setq-default lexical-binding t)
#+END_SRC

Let's also error-out really quick if the Emacs version is too old
(i.e. below 24 as of today).

#+BEGIN_SRC emacs-lisp :tangle init.el
  (let ((minver 24))
    (unless (>= emacs-major-version minver)
      (error "Your Emacs is too old -- this configuration requrise v%s or higher" minver)))
#+END_SRC

Let's also add =.emacs.d/lisp= folder(s) to the load-path so that we
can write our own emacs-lisp /libraries/.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; Add custom lisp files to load-path
  (add-to-list 'load-path (concat user-emacs-directory "lisp"))
  (add-to-list 'load-path (concat user-emacs-directory "config"))
  (add-to-list 'load-path (concat user-emacs-directory "lisp/use-package"))
#+END_SRC

** Variables and personal information

Let's define a bunch of variable name that will be useful later (like
where are =org-mode= file stored, etc.)

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq
   desktop-directory (substitute-env-in-file-name "$HOME/desktop")
   downloads-directory (expand-file-name "downloads" desktop-directory)
   videos-directory (expand-file-name "videos" desktop-directory)
   music-directory (expand-file-name "music" desktop-directory)
   pictures-directory (expand-file-name "pictures" desktop-directory)
   github-general-folder (substitute-env-in-file-name "$HOME/src/github.com")
   github-username "vdemeester"
   github-personal-folder (expand-file-name github-username github-general-folder))
#+END_SRC

** GUI Disables

Death to any gui elements in emacs! Do this EARLY so that emacs
doesn't redisplay in a way that is visually unpleasant on startup a
bunch of times.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (fboundp 'blink-cursor-mode) (blink-cursor-mode -1))
#+END_SRC

Tooltips are annoying:

#+BEGIN_SRC emacs-lisp :tangle init.el
(if (fboundp 'tooltip-mode) (tooltip-mode -1) (setq tooltip-use-echo-area t))'
#+END_SRC

** Package management

I am going to use [[https://github.com/jwiegley/use-package][use-package]] as my /package-management/ of choice
with built-in =package.el=. I'm manually updating it in this
repository from upstream.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (require 'package)
  (package-initialize)

  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  (setq use-package-always-pin "melpa-stable")

  (when (not package-archive-contents)
    (package-refresh-contents))

  (require 'use-package)
#+END_SRC

To reduce the risk of loading outdated byte code files, we set
load-prefer-newer and enable auto-compile-on-load-mode as early as
possible.

#+BEGIN_SRC emacs-lisp :tangle init.el
(setq load-prefer-newer t)
#+END_SRC

** Setup auto-compile

Automatically compile emacs-lisp libraries. This guarantee that Emacs never loads outdated byte code files.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package auto-compile
    :ensure t
    :config
    (progn
      (auto-compile-on-load-mode)
      (auto-compile-on-save-mode)))
#+END_SRC

** Backup files

Files suffixed with =~= in the current directory are ugly â€” this is
really something I hate. I'm not against using backup files, as it can
saves some time in case of trouble. But we'll move them elsewhere :
=~/tmp/emacs-1001= (if the use uid is =1001=). Note that we are not
using =/tmp= to store them because in most of my setup, =/tmp= is
/in-memory/. Using it would mean we would loose those temporary files
between reboots.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (defconst emacs-tmp-dir (format "%s/%s%s/" temporary-file-directory "emacs" (user-uid)))
  (setq backup-directory-alist
        `((".*" . ,emacs-tmp-dir))
        auto-save-file-name-transforms
        `((".*" ,emacs-tmp-dir t))
        auto-save-list-file-prefix emacs-tmp-dir)
#+END_SRC

Now that all the temporary files are out of the way, we can keep more of them.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)
#+END_SRC

** Encoding system

Make sure we use =utf-8= by default.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8-auto-unix)
#+END_SRC

** Lazier prompting

Answering yes and no to each question from Emacs can be tedious, a
single y or n will suffice.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Let Emacs display the unfinished keystroke quickly (by default it's 1
second).

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq echo-keystrokes 0.1)
#+END_SRC

* Load configurations

It is now time to load other configuration.

#+BEGIN_SRC emacs-lisp :tangle init.el
  ;; (require 'evil-config)
  (use-package org-config)
#+END_SRC
* Visual ðŸ˜Ž

Let's customize some graphical element, like dashboard, mode-line, and stuff

** Dashboard

The default Emacs splash-screen is not that useful. A useful
splash-screen would display some recent files opened, bookmaks,
projects and org-agenda items. Luckily, there is already a project
that does that, [[https://github.com/rakanalh/emacs-dashboard][emacs-dashboard]].

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package dashboard
    :ensure t
    :diminish dashboard-mode
    :config
    (setq dashboard-banner-logo-title "Welcome to Emacs, Vincent !"
          dashboard-startup-banner (expand-file-name "images/okumura_rin_4_by_naruto_lover16-d4ktg50.png" user-emacs-directory))
    (dashboard-setup-startup-hook))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bolt t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-one t))
#+END_SRC

A good companion to =doom-one= theme is [[https://github.com/hlissner/emacs-solaire-mode][solaire-mode]]. It helps
visually distinguish file-visiting from other types of windows (like
popups or sidebars).

#+BEGIN_SRC emacs-lisp :tangle init.el
  (use-package solaire-mode
    :ensure t
    :config
    (setq solaire-mode-remap-modeline nil)
    (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
    (add-hook 'after-revert-hook #'turn-on-solaire-mode)
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)
    (advice-add #'persp-load-state-from-file :after #'solaire-mode-restore-persp-mode-buffers))
#+END_SRC
** Lines and columns

We want to see somewhere the column and line number, and also
highlight the current line to see it easily.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (line-number-mode 1)
  (column-number-mode 1)
  (global-hl-line-mode 1)
#+END_SRC

** Syntax highlighting

Depending on the files opened and the syntax highlighting enabled,
~font-lock-mode~ can be slow, we try to limit that, to keep Emacs
reactive.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq font-lock-maximum-decoration 2)
#+END_SRC

** Fringe decorations

[[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
buffer. Emacs lets you customize it of course.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (setq-default indicate-buffer-boundaries 'left)
  (setq-default indicate-empty-lines +1)
#+END_SRC

** Byte-compiles =.emacs.d= folder

Let's also define a quick function to byte-compile files under
=.emacs.d= folder to speed things up.

#+BEGIN_SRC emacs-lisp :tangle init.el
  (defun vde/byte-recompile ()
    (interactive)
    (byte-recompile-directory user-emacs-directory 0)
    (byte-recompile-directory (expand-file-name "lisp" user-emacs-directory) 0)
    (byte-recompile-directory (expand-file-name "config" user-emacs-directory) 0)
    (byte-recompile-directory (expand-file-name "lisp/use-package" user-emacs-directory) 0))
#+END_SRC

