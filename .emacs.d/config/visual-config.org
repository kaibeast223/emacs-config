#+TITLE: Visual configuration üòé

Let's customize some graphical element, like dashboard, mode-line, and stuff

* Dashboard							  :CANCELLED:

The default Emacs splash-screen is not that useful. A useful
splash-screen would display some recent files opened, bookmaks,
projects and org-agenda items. Luckily, there is already a project
that does that, [[https://github.com/rakanalh/emacs-dashboard][emacs-dashboard]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dashboard
    :ensure t
    :config
    (setq dashboard-banner-logo-title "Welcome to Emacs, Vincent !"
          dashboard-startup-banner (expand-file-name "images/okumura_rin_4_by_naruto_lover16-d4ktg50.png" user-emacs-directory))
    (dashboard-setup-startup-hook))
#+END_SRC

* Theme

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package doom-themes
    :ensure t
    :config
    (setq doom-themes-enable-bolt t)
    (setq doom-themes-enable-italic t)
    (load-theme 'doom-one t))
#+END_SRC

A good companion to =doom-one= theme is [[https://github.com/hlissner/emacs-solaire-mode][solaire-mode]]. It helps
visually distinguish file-visiting from other types of windows (like
popups or sidebars).

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package solaire-mode
    :ensure t
    :config
    (setq solaire-mode-remap-modeline nil)
    (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
    (add-hook 'after-revert-hook #'turn-on-solaire-mode)
    (add-hook 'minibuffer-setup-hook #'solaire-mode-in-minibuffer)
    (add-hook 'ediff-prepare-buffer-hook #'solaire-mode)
    (advice-add #'persp-load-state-from-file :after #'solaire-mode-restore-persp-mode-buffers))
#+END_SRC
* Lines and columns

We want to see somewhere the column and line number, and also
highlight the current line to see it easily.

#+BEGIN_SRC emacs-lisp :tangle yes
  (line-number-mode 1)
  (column-number-mode 1)
  (global-hl-line-mode 1)
#+END_SRC

* Syntax highlighting

Depending on the files opened and the syntax highlighting enabled,
~font-lock-mode~ can be slow, we try to limit that, to keep Emacs
reactive.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq font-lock-maximum-decoration 2)
#+END_SRC

* Fringe decorations

[[http://www.emacswiki.org/emacs/TheFringe][The fringe]] is the vertical region at the right and left of the
buffer. Emacs lets you customize it of course.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq-default indicate-buffer-boundaries 'left)
  (setq-default indicate-empty-lines +1)
#+END_SRC

* Byte-compiles =.emacs.d= folder

Let's also define a quick function to byte-compile files under
=.emacs.d= folder to speed things up.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun vde/byte-recompile ()
    (interactive)
    (byte-recompile-directory user-emacs-directory 0)
    (byte-recompile-directory (expand-file-name "lisp" user-emacs-directory) 0)
    (byte-recompile-directory (expand-file-name "config" user-emacs-directory) 0)
    (byte-recompile-directory (expand-file-name "lisp/use-package" user-emacs-directory) 0))
#+END_SRC

* Fonts

Depending on the machine used I might not have the correct font
installed or another one renders better. I am a long-time fan of
=Ubuntu Mono= fonts but some fonts are starting to interesting me,
mainly =[[https://github.com/tonsky/FiraCode][Fira]]= and =[[https://github.com/i-tu/Hasklig][Hasklig]]= which do symbol ligatures.

#+BEGIN_SRC emacs-lisp :tangle yes
  (when (display-graphic-p)
    (defvar vde/fixed-font-family
      (cond ((x-list-fonts "Ubuntu Mono") "Ubuntu Mono-14")
            ((x-list-fonts "Hasklig") "Hasklig-14")
            ((x-list-fonts "Consolas") "Consolas-14"))
      "Fixed width font based on what is install")

    ;; FIXME(vdemeester) extract the condition out üëº
    (set-frame-font vde/fixed-font-family)
    (set-face-attribute 'default nil :font vde/fixed-font-family :height 110)
    (set-face-font 'default vde/fixed-font-family))
#+END_SRC

Let's write some emojis to see how they look üôÜ üòÜ üòÅ ‚ô® ‚õÖ üö≤.

* Line numbers

Enable line-number and column number mode (in the mode line) but also
add linum on programming modes (feel safe to enable on those but not
on other file that could be too big).

#+BEGIN_SRC emacs-lisp :tangle yes
  (line-number-mode t)
  (column-number-mode t)

  (global-linum-mode -1)
  (add-hook 'prog-mode-hook (lambda () (linum-mode t)))
#+END_SRC

* Provide configuration

#+BEGIN_SRC emacs-lisp :tangle yes
(provide 'visual-config)
#+END_SRC
