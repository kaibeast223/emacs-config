#+TITLE: org-mode configuration ꙮ

#+BEGIN_QUOTE
Org-mode is a powerful system for organizing your complex life with
simple plain-text files. It seamlessly integrates all your notes,
mindmaps, TODO lists, calendar, day planner, and project schedules
into a single system that can be easily searched (e.g. by grep),
encrypted (e.g. by GnuPG), backed up and synced (e.g. by Dropbox),
imported/exported, and accessed on the go (e.g. on an iPhone or
Android smartphone). It can even be used for authoring web pages and
documents.
#+END_QUOTE

Depending on how this section grows, org-mode might need its own
litterate org configuration file.

Let's define a bunch of variable name that will be useful later (like
where are =org-mode= file stored, etc.)

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-root-directory (expand-file-name "org" desktop-directory)
        org-sites-directory-name "sites"
        org-archive-directory-name "archive"
        org-archive-file-pattern "/%s_archive::"
        org-inbox-file "inbox.org"
        org-main-file "personal.org"
        org-todos-directory org-root-directory
        org-notes-directory org-root-directory
        org-sites-directory (expand-file-name org-sites-directory-name org-root-directory)
        org-archive-directory (expand-file-name org-archive-directory-name org-root-directory)
        org-docker-file "docker.org"
        org-journal-file "journal.org"
        org-publish-folder (substitute-env-in-file-name "$HOME/var/public_html")
        sites-folder (substitute-env-in-file-name "$HOME/src/sites/"))
#+END_SRC

* Standard configuration

First let's define the default directory for the =org= files, the one
to be added to the agenda and the archives.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package org
    :ensure t)
  (require 'find-lisp)
  (setq org-directory org-root-directory)
  (setq org-agenda-files (find-lisp-find-files org-todos-directory "\.org$"))
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)

  (setq org-log-redeadline (quote time))
  (setq org-log-reschedule (quote time))

  ;;warn me of any deadlines in next 7 days
  (setq org-deadline-warning-days 7)
  ;;show me tasks scheduled or due in next fortnight
  (setq org-agenda-span (quote fortnight))
  ;;don't show tasks as scheduled if they are already shown as a deadline
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  ;;don't give awarning colour to tasks with impending deadlines
  ;;if they are scheduled to be done
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;;don't show tasks that are scheduled or have deadlines in the
  ;;normal todo list
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))
  ;;sort tasks in order of when they are due and then by priority
  (setq org-agenda-sorting-strategy
    (quote
     ((agenda deadline-up priority-down)
      (todo priority-down category-keep)
      (tags priority-down category-keep)
      (search category-keep))))
#+END_SRC

Let's also define the default /todo-keywords/ and the workflow between
them.

- =TODO= : task not started yet, part of the backlog :)
- =PROGRESS= : task that are currently in progress, should be a minimum
- =BLOCKED= : task that I start working on but cannot anymore (for
  some reason), thus they are blocked
- =REVIEW= : task that should be done, but I need or wait for a review
  (by someone else or by me)
- =DONE= : task that are completed.
- =ARCHIVED= : same as done but keep it here (and not moving into
  archive)

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "PROGRESS(p)" "PAUSED" "BLOCKED" "REVIEW" "|" "DONE(d!)" "ARCHIVED")
                (sequence "REPORT(r!)" "BUG" "KNOWNCAUSE" "|" "FIXED(f!)")
                (sequence "|" "CANCELLED(c@)"))))
  (setq org-todo-keyword-faces
        (quote (("TODO" . org-todo)
                ("PROGRESS" . "green")
                ("PAUSED" . "cyan")
                ("BLOCKED" . "red")
                ("REVIEW" . "yellow")
                ("DONE" . org-done)
                ("ARCHIVED" . org-done)
                ("CANCELLED" . "black")
                ("REPORT" . org-todo)
                ("BUG" . "red")
                ("KNOWNCAUSE" . "yellow")
                ("FIXED" . org-done))))

  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t)))))
#+END_SRC

If a parent has all it's children =DONE=, make it =DONE= too.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun org-summary-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, to PROGRESS otherwise."
    (let (org-log-done org-log-states)   ; turn off logging
      (if (not (string-blank-p (org-get-todo-state)))
          (org-todo (if (= n-not-done 0) "DONE" "PROGRESS")))
      ))

  (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
#+END_SRC

* Archives

We want to be able to archive some /done/ projects. Let's load
org-archive and configure it.

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'org-archive)
  (setq org-archive-location (concat org-archive-directory org-archive-file-pattern))
#+END_SRC

Let's also have some /auto-archive/ stuff, taken inspiration from [[http://article.gmane.org/gmane.emacs.orgmode/2963][john wiegley]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar org-my-archive-expiry-days 9
    "The number of days after which a completed task should be auto-archived.
  This can be 0 for immediate, or a floating point value.")

  (defun org-archive-done-tasks ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\* \\(DONE\\|CANCELED\\) " nil t)
     (if (save-restriction
              (save-excursion
          (org-narrow-to-subtree)
          (search-forward ":LOGBOOK:" nil t)))
            (forward-line)
          (org-archive-subtree)
          (goto-char (line-beginning-position))))))

  (defalias 'archive-done-tasks 'org-archive-done-tasks)
#+END_SRC

* Captures

Let's define some useful function… Mainly add support for allowing
prompt input in templates (see [[http://storax.github.io/blog/2016/05/02/org-capture-tricks/][org-capture-tricks]]).

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar oc-capture-prmt-history nil
    "History of prompt answers for org capture.")
  (defun oc/prmt (prompt variable)
    "PROMPT for string, save it to VARIABLE and insert it."
    (make-local-variable variable)
    (set variable (read-string (concat prompt ": ") nil oc-capture-prmt-history)))
  (defun oc/inc (what text &rest fmtvars)
    "Ask user to include WHAT.  If user agrees return TEXT."
    (when (y-or-n-p (concat "Include " what "?"))
      (apply 'format text fmtvars)))
#+END_SRC

Setup captures templates..

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-capture-templates
     '(;; other entries
          ("t" "inbox"
        entry (file (expand-file-name org-inbox-file org-todos-directory))
           "* %?\n%i\n%a")
          ("d" "task"
        entry (file+headline (expand-file-name org-main-file org-todos-directory) "Tasks")
           "* TODO %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")
          ("d" "docker task"
        entry (file+headline (expand-file-name org-docker-file org-todos-directory) "Tasks")
           "* TODO gh:docker/%(oc/prmt \"project\" 'd-prj)#%(oc/prmt \"issue/pr\" 'd-issue) %?%(oc/inc \"feature content\" \" [/]\n- [ ] Implementation\n- [ ] Tests\n- [ ] Docs\")")
          ("j" "Journal entry"
           entry (file+datetree+prompt (expand-file-name org-journal-file org-root-directory))
           "* %?\n%i\nFrom: %a\n%U" :empty-lines 1)
          ;; other entries
          ))
#+END_SRC

* Links

#+BEGIN_QUOTE
One little-know feature of org-mode is that you can define new types
of links with the aptly named org-add-link-type. The applications of
this virtue are many.
#+END_QUOTE

Let's define one for =grep= and =pt=.

#+BEGIN_SRC emacs-lisp :tangle yes
  (org-add-link-type
   "grep" 'my/follow-grep-link
   )
  (defun my/follow-grep-link (regexp)
    "Run `rgrep' with REGEXP and FOLDER as argument,
  like this : [[grep:REGEXP:FOLDER]]."
    (setq expressions (split-string regexp ":"))
    (setq exp (nth 0 expressions))
    (grep-compute-defaults)
    (if (= (length expressions) 1)
        (progn
          (rgrep exp "*" (expand-file-name "./")))
      (progn
        (setq folder (nth 1 expressions))
        (rgrep exp "*" (expand-file-name folder))))
    )

  (use-package pt
    :load-path "~/.emacs.d/lisp/pt/")

  ;; pt-regexp (regexp directory &optional args)
  (org-add-link-type
   "pt" 'my/follow-pt-link)
  (defun my/follow-pt-link (regexp)
    "Run `pt-regexp` with REXEP and FOLDER as argument,
  like this : [[pt:REGEXP:FOLDER]]"
    (setq expressions (split-string regexp ":"))
    (setq exp (nth 0 expressions))
    (if (= (length expressions) 1)
        (progn
          (pt-regexp exp (expand-file-name "./")))
      (progn
        (setq folder (nth 1 expressions))
        (pt-regexp exp (file-name-as-directory (expand-file-name folder)))))
    )
#+END_SRC

Let's define some for youtube and other media websites.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar yt-iframe-format
    ;; You may want to change your width and height.
    (concat "<iframe width=\"440\""
            " height=\"335\""
            " src=\"https://www.youtube.com/embed/%s\""
            " frameborder=\"0\""
            " allowfullscreen>%s</iframe>"))

  (org-add-link-type
   "youtube"
   (lambda (handle)
     (browse-url
      (concat "https://www.youtube.com/embed/"
              handle)))
   (lambda (path desc backend)
     (cl-case backend
       (html (format yt-iframe-format
                     path (or desc "")))
       (latex (format "\href{%s}{%s}"
                      path (or desc "video"))))))
#+END_SRC

Let's define some for github.com sites.


#+BEGIN_SRC emacs-lisp :tangle yes
  (org-add-link-type
   "gh" 'my/follow-gh-link)
  (defun my/follow-gh-link (issue)
    "Browse github issue/pr specified"
    (setq expressions (split-string issue "#"))
    (setq project (nth 0 expressions))
    (setq issue (nth 1 expressions))
    (browse-url
     (format "https://github.com/%s/issues/%s" project issue)))
#+END_SRC


Add some more abbreviation to links

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-link-abbrev-alist
        '(("gmane" . "http://thread.gmane.org/%s")
          ("google" . "https://www.google.com/search?q=%s")
          ("github" . "http://github.com/%s")
          ))
#+END_SRC


And some for =org-mode= itself.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; from http://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html
  (org-add-link-type
   "tag" 'endless/follow-tag-link)

  (defun endless/follow-tag-link (tag)
    "Display a list of TODO headlines with tag TAG.
  With prefix argument, also display headlines without a TODO keyword."
    (org-tags-view (null current-prefix-arg) tag))
#+END_SRC

* Code blocks

 We are using a lot of code block in org-mode, in this file for
 example ; let's /fontify/ the code blocks first.

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-src-fontify-natively t)
  (setq org-html-htmlize-output-type 'css)
  (setq org-html-htmlize-font-prefix "org-")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '( (perl . t)
      (ruby . t)
      (sh . t)
      (python . t)
      (emacs-lisp . t)
      ;; (golang . t)
      (haskell . t)
      (ditaa . t)
      ))
#+END_SRC

Add a function to easily add a code block and bind it.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun my/org-insert-src-block (src-code-type)
    "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
    (interactive
     (let ((src-code-types
            '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
              "calc" "dot" "gnuplot" "ledger" "R" "sass" "screen" "sql" "awk"
              "ditaa" "haskell" "latex" "lisp" "matlab" "org" "perl" "ruby"
              "sqlite" "rust" "scala" "golang" "restclient")))
       (list (ido-completing-read "Source code type: " src-code-types))))
    (progn
      (newline-and-indent)
      (insert (format "#+BEGIN_SRC %s\n" src-code-type))
      (newline-and-indent)
      (insert "#+END_SRC\n")
      (previous-line 2)
      (org-edit-src-code)))

  (defun my/org-insert-html-block ()
    "Insert a `HTML-BLOCK` type in org-mode."
    (interactive
     (progn
       (newline-and-indent)
       (insert "#+BEGIN_HTML\n")
       (newline-and-indent)
       (insert "#+END_HTML\n")
       (previous-line 2))))


  (defun my/org-insert-blockquote-block ()
    "Insert a `BLOCKQUOTE-BLOCK` type in org-mode."
    (interactive
     (progn
       (newline-and-indent)
       (insert "#+BEGIN_BLOCKQUOTE\n")
       (newline-and-indent)
       (insert "#+END_BLOCKQUOTE\n")
       (previous-line 2))))



  (add-hook 'org-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c s e") 'org-edit-src-code)
               (local-set-key (kbd "C-c s i") 'my/org-insert-src-block)
               (local-set-key (kbd "C-c s h") 'my/org-insert-html-block)
               (local-set-key (kbd "C-c s b") 'my/org-insert-blockquote-block))
            'append)
#+END_SRC

* Archives

We want to be able to archive some /done/ projects. Let's load
org-archive and configure it.

#+BEGIN_SRC emacs-lisp :tangle yes
     (require 'org-archive)
     (setq org-archive-location (concat org-archive-directory org-archive-file-pattern))
#+END_SRC

Let's also have some /auto-archive/ stuff, taken inspiration from [[http://article.gmane.org/gmane.emacs.orgmode/2963][john
wiegley]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (defvar org-my-archive-expiry-days 9
    "The number of days after which a completed task should be auto-archived.
  This can be 0 for immediate, or a floating point value.")

  (defun org-archive-done-tasks ()
    (interactive)
    (save-excursion
      (goto-char (point-min))
      (while (re-search-forward "\* \\(DONE\\|CANCELED\\) " nil t)
     (if (save-restriction
              (save-excursion
          (org-narrow-to-subtree)
          (search-forward ":LOGBOOK:" nil t)))
            (forward-line)
          (org-archive-subtree)
          (goto-char (line-beginning-position))))))

  (defalias 'archive-done-tasks 'org-archive-done-tasks)
#+END_SRC

* Tags

Tags should be displayed from the 90 column.

#+BEGIN_SRC emacs-lisp
  (setq org-tags-column -90)
#+END_SRC

Define a list of default tags that should apply for all org-mode
buffers.

#+BEGIN_SRC emacs-lisp :tangle yes
  ;; Wish I could use taggroup but it doesn't seem to work..
  (setq org-tag-alist '(
                     ("important" . ?i)
                     ("ongoing" . ?o)         ;; ongoing "project", use to filter big project that are on the go
                     ("next" . ?n)            ;; next "project"/"task", use to filter next things to do
                     ("@home" . ?h)           ;; needs to be done at home
                     ("@work" . ?w)           ;; needs to be done at work
                     ("dev" . ?e)             ;; this is a development task
                     ("infra" . ?a)           ;; this is a sysadmin/infra task
                     ("document" . ?d)        ;; needs to produce a document (article, post, ..)
                     ("download" . ?D)        ;; needs to download something
                     ("media" . ?m)           ;; this is a media (something to watch, listen, record, ..)
                     ("mail" . ?M)            ;; mail-related (to write & send or to read)
                     ("triage" . ?t)          ;; need "triage", tag it to easily find them
                     ("task" . ?a)            ;; a simple task (no project), the name is kinda misleading
                     ;; docker-related tags
                     ("docker")
                     ("kubernetes")
                     ("compose")
                     ("moby")
                     ("linuxkit")
                     ("docs")
                     ;; languages
                     ("golang")
                     ("python")
                     ("java")
                     ("clojure")
                     ("emacs-lisp")
                     ;; sites tags
                     ("sites")
                     ("vdf")
                     ;; configs tags
                     ("configs")
                     ("emacs")
                     ("i3")
                     ("shell")
                     ;; services
                     ("services")
                     ))
#+END_SRC

Note that =important= and =urgent= helps me prioritize my /todos/, in
a /quadrant fashion way/.

| Important          | *Kaizen*        | *Panic*             |
| /tag important/    | improvements    | emergency           |
|--------------------+-----------------+---------------------|
| Less Important     | *Organics*      | Social *investment* |
| /no tag important/ | inspiration     | Social activities   |
|--------------------+-----------------+---------------------|
|                    | Less Urgent     | Urgent              |
|                    | /no tag urgent/ | /tag urgent/        |

* Clocks

Let's configure org-mode clocks a little bit. Let's first setup some
common things.

#+BEGIN_SRC emacs-lisp :tange yes
  ;; Sometimes I change tasks I'm clocking quickly
  ;; this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks 1)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done 1)
  ;; If idle for more than 15 minutes, resolve the things by asking what to do
  ;; with the clock time
  (setq org-clock-idle-time 15)
#+END_SRC

We also want to set the state to =PROGRESS= when we are clocking in.

#+BEGIN_SRC emacs-lisp :tangle yes
  (defadvice org-clock-in (after sacha activate)
    "Set this task's status to 'PROGRESS'."
    (org-todo "PROGRESS"))
#+END_SRC

* Agenda(s)

Set custom agendas.. For the syntax, look in worg : [[http://orgmode.org/worg/org-tutorials/advanced-searching.html][Advanced searching]]
and [[http://orgmode.org/worg/org-tutorials/org-custom-agenda-commands.html][Custom Agenda Commands]].

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "urgent+PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-ndays 1)))
            (tags "next"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Today's tasks")))
            (tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(or (org-agenda-skip-entry-if 'tag 'urgent)
                                                  (org-agenda-skip-entry-if 'todo 'done)))
                   (org-agenda-overriding-header "Kaizen tasks -improvement-")))
            (alltodo ""
                     ((org-agenda-sorting-strategy '(priority-down))
                      (org-agenda-skip-function '(or (org-agenda-skip-entry-if 'todo 'progress)
                                                     (org-agenda-skip-entry-if 'todo 'review)
                                                     (org-agenda-skip-entry-if 'todo 'done)
                                                     (vde/org-skip-subtree-if-habit)
                                                     (vde/org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))
          ("t" todo "TODO"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ("p" todo "PROGRESS"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ("r" todo "REVIEW"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ("u" todo "PAUSED"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ("b" todo "BLOCKED"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ("n" "Next tasks" tags-todo "next"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-tags-exclude-from-inheritance '("next"))
            (org-agenda-prefix-format "  Mixed: ")))
          ("i" "Triage tasks — to look" tags-todo "triage"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ;; Timelines
          ("d" "Timeline for today" ((agenda "" ))
           ((org-agenda-ndays 1)
            (org-agenda-show-log t)
            (org-agenda-log-mode-items '(clock closed))
            (org-agenda-clockreport-mode t)
            (org-agenda-entry-types '())))
          ("w" "Weekly review" agenda ""
           ((org-agenda-span 7)
            (org-agenda-log-mode 1)))
          ("W" "Weekly review sans DAILY" agenda ""
           ((org-agenda-span 7)
            (org-agenda-log-mode 1)
            (org-agenda-tag-filter-preset '("-DAILY"))))
          ;; Panic tasks : urgent & important
          ;; Probably the most important to do, but try not have to much of them..
          ("P" "Panic -emergency-" tags-todo "urgent+PRIORITY=\"A\""
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ;; Kaizen tasks : important but not urgent
          ("K" "Kaizen -improvement-" tags-todo "PRIORITY=\"A\"&-urgent"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ;; Social investment : urgent
          ("S" "Social -investment-" tags-todo "-PRIORITY=\"A\"+urgent"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ;; Organics
          ("O" "Organics -inspiration-" tags-todo "-PRIORITY=\"A\"&-urgent"
           ((org-agenda-sorting-strategy '(priority-down))
            (org-agenda-prefix-format "  Mixed: ")))
          ("N" search ""
           ((org-agenda-text-search-extra-files nil)))))

  (defun vde/org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun vde/org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))
#+END_SRC

* Publishing

Let's configure the publishing part of org-mode. The first org-mode
files we want to publish are in =~/desktop/org/sites/{project}=, and
we want to publish them in =~/var/public_html/{project}= for now.

Few org-export and org-html configuration.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package htmlize
    :ensure t
    :defer t)
  ;;      (setq org-html-head "<link rel=\"stylesheet\" type=\"text/css\" hrefl=\"css/stylesheet.css\" />")
  (setq org-html-include-timestamps nil)
  ;; (setq org-html-htmlize-output-type 'css)
  (setq org-html-head-include-default-style nil)
#+END_SRC

And the projects.

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package ox-publish)
  ;; (use-package ox-rss)

  (setq org-html-html5-fancy t)

  ;; Define some variables to write less :D
  (setq sbr-base-directory (expand-file-name "sbr" org-sites-directory)
        sbr-publishing-directory (expand-file-name "sbr" org-publish-folder)
        vdf-base-directory (expand-file-name "vdf" org-sites-directory)
        vdf-site-directory (expand-file-name "blog" github-personal-folder)
        vdf-publishing-directory (expand-file-name "posts" (expand-file-name "content" vdf-site-directory))
        vdf-static-directory (expand-file-name "static" vdf-site-directory)
        vdf-css-publishing-directory (expand-file-name "css" vdf-static-directory)
        vdf-assets-publishing-directory vdf-static-directory)

  ;; Project
  (setq org-publish-project-alist
        `(("sbr-notes"
           :base-directory ,sbr-base-directory
           :base-extension "org"
           :publishing-directory ,sbr-publishing-directory
           :makeindex t
           :exclude "FIXME"
           :recursive t
           :htmlized-source t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :auto-preamble t
           :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"style/style.css\" />"
           :html-preamble "<div id=\"nav\">
  <ul>
  <li><a href=\"/\" class=\"home\">Home</a></li>
  </ul>
  </div>"
           :html-postamble "<div id=\"footer\">
  %a %C %c
  </div>")
          ("sbr-static"
           :base-directory ,sbr-base-directory
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg"
           :publishing-directory ,sbr-publishing-directory
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("sbr" :components ("sbr-notes" "sbr-static"))
          ("vdf-notes"
           :base-directory ,vdf-base-directory
           :base-extension "org"
           :publishing-directory ,vdf-publishing-directory
           :exclude "FIXME"
           :section-numbers nil
           :with-toc nil
           :with-drawers t
           :htmlized-source t
           :org-html-htmlize-output-type 'css
           :html-html5-fancy t
           :publishing-function org-html-publish-to-html
           :headline-levels 4
           :body-only t)
          ("vdf-static-css"
           :base-directory ,vdf-base-directory
           :base-extension "css"
           :publishing-directory ,vdf-css-publishing-directory
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("vdf-static-assets"
           :base-directory ,vdf-base-directory
           :base-extension "png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg"
           :publishing-directory ,vdf-assets-publishing-directory
           :recursive t
           :publishing-function org-publish-attachment
           )
          ("vdf" :components ("vdf-notes" "vdf-static-css" "vdf-static-assets"))
          ))
#+END_SRC
* Provide configuration
#+BEGIN_SRC emacs-lisp :tangle yes
  (provide 'org-config)
#+END_SRC
